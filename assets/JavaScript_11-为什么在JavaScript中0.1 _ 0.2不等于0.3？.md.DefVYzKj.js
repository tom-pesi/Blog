import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.Dez3CbjC.js";const o=JSON.parse('{"title":"为什么在 JavaScript 中 0.1 + 0.2 不等于 0.3？","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/11-为什么在JavaScript中0.1 + 0.2不等于0.3？.md","filePath":"JavaScript/11-为什么在JavaScript中0.1 + 0.2不等于0.3？.md"}'),h={name:"JavaScript/11-为什么在JavaScript中0.1 + 0.2不等于0.3？.md"},t=n(`<h1 id="为什么在-javascript-中-0-1-0-2-不等于-0-3" tabindex="-1">为什么在 JavaScript 中 0.1 + 0.2 不等于 0.3？ <a class="header-anchor" href="#为什么在-javascript-中-0-1-0-2-不等于-0-3" aria-label="Permalink to &quot;为什么在 JavaScript 中 0.1 + 0.2 不等于 0.3？&quot;">​</a></h1><p>在编写 JavaScript 代码时，你可能会遇到一个奇怪的现象：<code>0.1 + 0.2</code>并不等于<code>0.3</code>。这个问题并不仅仅局限于 JavaScript，它在许多编程语言中都会出现。本文将解释背后的原因，并探讨如何处理这个问题。</p><h3 id="浮点数的表示" tabindex="-1">浮点数的表示 <a class="header-anchor" href="#浮点数的表示" aria-label="Permalink to &quot;浮点数的表示&quot;">​</a></h3><p>首先，我们需要了解计算机是如何表示小数的。计算机使用二进制（base-2）来表示所有数据，包括小数。而在二进制中，并不是所有的十进制小数都能精确地表示。</p><p>在十进制系统中，0.1 可以表示为<code>1/10</code>。但是，在二进制系统中，0.1 表示为一个无限循环的小数，类似于在十进制中 1/3 表示为 0.3333...。二进制中的 0.1 表示为<code>0.0001100110011001100110011001100...</code>（循环）。</p><h3 id="ieee-754-标准" tabindex="-1">IEEE 754 标准 <a class="header-anchor" href="#ieee-754-标准" aria-label="Permalink to &quot;IEEE 754 标准&quot;">​</a></h3><p>JavaScript（以及大多数编程语言）使用 IEEE 754 标准来表示浮点数。这是一种二进制浮点数表示方法，包括 32 位和 64 位两种格式。JavaScript 使用 64 位双精度格式。</p><p>在 IEEE 754 标准下，浮点数表示为：</p><ul><li>1 位符号位（0 表示正，1 表示负）</li><li>11 位指数位</li><li>52 位尾数位（加上隐含的 1 位）</li></ul><p>对于像 0.1 和 0.2 这样的数字，这种表示方法会导致精度损失。将这些十进制小数转换为二进制浮点数时，它们只能近似表示。这种近似表示导致了<code>0.1 + 0.2</code>的结果不完全等于 0.3。</p><h3 id="具体示例" tabindex="-1">具体示例 <a class="header-anchor" href="#具体示例" aria-label="Permalink to &quot;具体示例&quot;">​</a></h3><p>让我们看一个具体的例子：</p><ul><li>0.1 在二进制浮点数中的近似表示是：<code>0.00011001100110011001100110011001100110011001100110011</code></li><li>0.2 在二进制浮点数中的近似表示是：<code>0.001100110011001100110011001100110011001100110011001101</code></li></ul><p>当你将这两个值相加时，得到的结果是：</p><ul><li><code>0.1 + 0.2 ≈ 0.30000000000000004</code></li></ul><p>这并不是精确的 0.3，而是一个非常接近 0.3 的数值，但在计算机的精度限制下，它们并不相等。</p><h3 id="处理浮点数精度问题" tabindex="-1">处理浮点数精度问题 <a class="header-anchor" href="#处理浮点数精度问题" aria-label="Permalink to &quot;处理浮点数精度问题&quot;">​</a></h3><p>为了在 JavaScript 中正确处理浮点数的精度问题，可以采取以下方法：</p><ol><li><p><strong>使用容差值进行比较</strong>： 由于直接比较浮点数可能会失败，使用一个非常小的容差值来判断两个浮点数是否接近。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> epsilon</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0000001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> epsilon) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.1 + 0.2 is approximately equal to 0.3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.1 + 0.2 is not equal to 0.3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>使用整数运算</strong>： 将浮点数转换为整数进行运算，然后再将结果转换回浮点数。这在涉及货币计算时特别有用。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 10</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 20</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 30</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0.3</span></span></code></pre></div></li><li><p><strong>使用 BigDecimal 库</strong>： 对于需要高精度计算的场景，可以使用 BigDecimal 库进行处理，这些库能够精确处理十进制数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用BigDecimal.js库</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Big</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;big.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Big</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Big</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0.3</span></span></code></pre></div></li></ol><h3 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h3><p><code>0.1 + 0.2</code>不等于<code>0.3</code>的原因在于计算机使用二进制浮点数表示小数时存在精度损失。理解这一点，并采用适当的方法来处理浮点数计算，可以帮助我们避免相关的精度问题。在日常开发中，了解并合理处理这种精度问题至关重要。</p>`,21),l=[t];function p(k,e,r,d,E,g){return a(),i("div",null,l)}const y=s(h,[["render",p]]);export{o as __pageData,y as default};
