import{_ as i,c as s,o as t,a2 as e}from"./chunks/framework.Dez3CbjC.js";const E=JSON.parse('{"title":"简单理解 offsetHeight 与 clientHeight 的区别","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/18-简单理解offsetHeight与clientHeight的区别.md","filePath":"JavaScript/18-简单理解offsetHeight与clientHeight的区别.md"}'),a={name:"JavaScript/18-简单理解offsetHeight与clientHeight的区别.md"},h=e(`<h1 id="简单理解-offsetheight-与-clientheight-的区别" tabindex="-1">简单理解 offsetHeight 与 clientHeight 的区别 <a class="header-anchor" href="#简单理解-offsetheight-与-clientheight-的区别" aria-label="Permalink to &quot;简单理解 offsetHeight 与 clientHeight 的区别&quot;">​</a></h1><p>在前端开发中，掌握 DOM 元素的尺寸和位置是非常重要的。其中，<code>offsetHeight</code> 和 <code>clientHeight</code> 是两个常用的属性，但它们的含义和使用场景有所不同。本文将深入探讨这两个属性的区别和应用。</p><h4 id="什么是-offsetheight" tabindex="-1">什么是 offsetHeight？ <a class="header-anchor" href="#什么是-offsetheight" aria-label="Permalink to &quot;什么是 offsetHeight？&quot;">​</a></h4><p><code>offsetHeight</code> 是一个只读属性，它表示元素的总高度，包括元素的边框(border)、内边距(padding)和水平滚动条的高度（如果存在）。具体而言，<code>offsetHeight</code> 等于元素的内容高度(content height) 加上内边距、边框和水平滚动条的高度。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myElement&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element.offsetHeight);</span></span></code></pre></div><h4 id="什么是-clientheight" tabindex="-1">什么是 clientHeight？ <a class="header-anchor" href="#什么是-clientheight" aria-label="Permalink to &quot;什么是 clientHeight？&quot;">​</a></h4><p><code>clientHeight</code> 也是一个只读属性，它表示元素的内部高度，包括内边距(padding)，但不包括边框(border)和水平滚动条的高度（如果存在）。具体而言，<code>clientHeight</code> 等于元素的内容高度(content height) 加上内边距的高度。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myElement&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element.clientHeight);</span></span></code></pre></div><h4 id="主要区别" tabindex="-1">主要区别 <a class="header-anchor" href="#主要区别" aria-label="Permalink to &quot;主要区别&quot;">​</a></h4><ol><li><p><strong>包含的部分不同</strong>：</p><ul><li><code>offsetHeight</code> 包含内容高度、内边距、高度边框和水平滚动条的高度。</li><li><code>clientHeight</code> 只包含内容高度和内边距，不包含边框和滚动条的高度。</li></ul></li><li><p><strong>应用场景不同</strong>：</p><ul><li>使用 <code>offsetHeight</code> 可以获取元素的完整高度，包括所有的边框和滚动条，这在需要考虑所有视觉元素的场景中很有用。</li><li>使用 <code>clientHeight</code> 可以获取元素的实际内容高度和内边距，这在需要精确控制内容区域大小的场景中很有用。</li></ul></li><li><p><strong>滚动条的影响</strong>：</p><ul><li>当元素具有滚动条时，<code>offsetHeight</code> 会包含滚动条的高度，而 <code>clientHeight</code> 不会。</li></ul></li></ol><h4 id="实例对比" tabindex="-1">实例对比 <a class="header-anchor" href="#实例对比" aria-label="Permalink to &quot;实例对比&quot;">​</a></h4><p>假设我们有以下 HTML 结构：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myElement&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height: 100px; padding: 10px; border: 5px solid black; overflow: scroll;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;这是一个测试元素。&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myElement&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;offsetHeight:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, element.offsetHeight); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：130 (100内容高度 + 20内边距 + 10边框)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;clientHeight:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, element.clientHeight); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：100 (100内容高度 + 20内边距 - 20滚动条)</span></span></code></pre></div><p>在这个例子中，<code>offsetHeight</code> 包含了边框和滚动条的高度，而 <code>clientHeight</code> 仅包含内容和内边距的高度。</p><h4 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h4><p><code>offsetHeight</code> 和 <code>clientHeight</code> 是获取 DOM 元素高度的重要属性，但它们在具体使用中有不同的侧重点。了解它们之间的区别可以帮助开发者更准确地控制和布局页面元素，从而创建更精致和精确的用户界面。</p><p>希望这篇文章能够帮助你更好地理解和使用 <code>offsetHeight</code> 和 <code>clientHeight</code>。如果你有任何问题或需要进一步的解释，请随时在评论区留言。</p><p>Happy coding!</p>`,19),l=[h];function n(p,k,o,d,c,g){return t(),s("div",null,l)}const y=i(a,[["render",n]]);export{E as __pageData,y as default};
