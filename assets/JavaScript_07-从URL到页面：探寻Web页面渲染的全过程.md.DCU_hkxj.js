import{_ as a,c as l,o as i,a2 as t}from"./chunks/framework.Dez3CbjC.js";const u=JSON.parse('{"title":"从 URL 到页面：探寻 Web 页面渲染的全过程","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/07-从URL到页面：探寻Web页面渲染的全过程.md","filePath":"JavaScript/07-从URL到页面：探寻Web页面渲染的全过程.md"}'),o={name:"JavaScript/07-从URL到页面：探寻Web页面渲染的全过程.md"},e=t('<h1 id="从-url-到页面-探寻-web-页面渲染的全过程" tabindex="-1">从 URL 到页面：探寻 Web 页面渲染的全过程 <a class="header-anchor" href="#从-url-到页面-探寻-web-页面渲染的全过程" aria-label="Permalink to &quot;从 URL 到页面：探寻 Web 页面渲染的全过程&quot;">​</a></h1><p>在我们浏览网页时，从输入 URL 到最终页面呈现在浏览器上，这背后发生了一系列复杂的步骤。本文将详细介绍这个过程，包括 TCP 连接的建立与终止。</p><h3 id="_1-dns-解析" tabindex="-1">1. DNS 解析 <a class="header-anchor" href="#_1-dns-解析" aria-label="Permalink to &quot;1. DNS 解析&quot;">​</a></h3><p>当你在浏览器中输入一个 URL（例如<code>www.example.com</code>）并按下回车，第一步是 DNS 解析。浏览器将域名发送给 DNS 服务器，以获取对应的 IP 地址。这个过程如下：</p><ol><li>浏览器检查本地缓存是否已有该域名的 IP 地址。</li><li>系统 DNS 缓存-路由器 DNS 缓存-网络运营商缓存</li><li>如果还没有，浏览器向 DNS 递归解析器发送请求。</li><li>递归解析器向根 DNS 服务器请求顶级域名服务器的位置（如<code>.com</code>服务器）。</li><li>递归解析器向顶级域名服务器请求权威 DNS 服务器的位置（存储<code>example.com</code>的服务器）。</li><li>递归解析器向权威 DNS 服务器请求<code>example.com</code>的 IP 地址。</li><li>权威 DNS 服务器返回 IP 地址给递归解析器，递归解析器再将 IP 地址返回给浏览器。</li></ol><h3 id="_2-tcp-连接的建立-三次握手" tabindex="-1">2. TCP 连接的建立（三次握手） <a class="header-anchor" href="#_2-tcp-连接的建立-三次握手" aria-label="Permalink to &quot;2. TCP 连接的建立（三次握手）&quot;">​</a></h3><p>得到 IP 地址后，浏览器与服务器建立 TCP 连接，确保数据可以可靠传输。建立过程如下：</p><ol><li><strong>SYN</strong>：浏览器向服务器发送一个 SYN（同步）包，请求建立连接。 <ul><li>第一次握手，由浏览器发起，告诉服务器我要发送请求了</li></ul></li><li><strong>SYN-ACK</strong>：服务器回应一个 SYN-ACK（同步-确认）包，表示同意连接。 <ul><li>第二次握手，由服务器发起，告诉浏览器我准备接受了，你赶紧发送吧。</li></ul></li><li><strong>ACK</strong>：浏览器再发送一个 ACK（确认）包，连接建立。 <ul><li>第三次握手，由浏览器发送，告诉服务器，我马上就发了，准备接受吧</li></ul></li></ol><h3 id="_3-发送-http-请求" tabindex="-1">3. 发送 HTTP 请求 <a class="header-anchor" href="#_3-发送-http-请求" aria-label="Permalink to &quot;3. 发送 HTTP 请求&quot;">​</a></h3><p>TCP 连接建立后，浏览器向服务器发送一个 HTTP 请求。这通常是一个 GET 请求，要求服务器发送所请求的资源（如 HTML 文件）。</p><h3 id="_4-服务器处理请求" tabindex="-1">4. 服务器处理请求 <a class="header-anchor" href="#_4-服务器处理请求" aria-label="Permalink to &quot;4. 服务器处理请求&quot;">​</a></h3><p>服务器接收到 HTTP 请求后，处理请求并生成响应。服务器可能需要查询数据库、执行后台脚本或访问其他服务，然后将响应数据（如 HTML、CSS、JavaScript、图像等）发送回浏览器。</p><h3 id="_5-浏览器接收响应并开始处理" tabindex="-1">5. 浏览器接收响应并开始处理 <a class="header-anchor" href="#_5-浏览器接收响应并开始处理" aria-label="Permalink to &quot;5. 浏览器接收响应并开始处理&quot;">​</a></h3><p>浏览器接收到服务器的 HTTP 响应后，开始解析响应内容：</p><ol><li><strong>解析 HTML</strong>：浏览器解析 HTML 内容，构建 DOM（Document Object Model）树。</li><li><strong>请求资源</strong>：在解析 HTML 时，遇到外部资源（如 CSS、JavaScript 文件、图像等）的引用，浏览器会并行地发起请求获取这些资源。</li><li><strong>解析 CSS</strong>：获取到 CSS 文件后，浏览器解析 CSS，生成 CSSOM（CSS Object Model）树。</li><li><strong>执行 JavaScript</strong>：浏览器解析并执行 JavaScript 代码，JavaScript 可能会修改 DOM 树或 CSSOM 树。</li></ol><h3 id="_6-页面布局和绘制" tabindex="-1">6. 页面布局和绘制 <a class="header-anchor" href="#_6-页面布局和绘制" aria-label="Permalink to &quot;6. 页面布局和绘制&quot;">​</a></h3><ol><li><strong>生成渲染树</strong>：浏览器将 DOM 树和 CSSOM 树结合生成渲染树。</li><li><strong>布局（Layout）</strong>：浏览器计算每个节点的几何信息（位置和大小）。</li><li><strong>绘制（Paint）</strong>：浏览器将渲染树的各个节点绘制到屏幕上。</li></ol><h3 id="_7-tcp-连接的终止-四次挥手" tabindex="-1">7. TCP 连接的终止（四次挥手） <a class="header-anchor" href="#_7-tcp-连接的终止-四次挥手" aria-label="Permalink to &quot;7. TCP 连接的终止（四次挥手）&quot;">​</a></h3><p>当所有数据传输完成后，需要终止 TCP 连接，以释放资源。过程如下：</p><ol><li><strong>第一次挥手（FIN）</strong>：主动关闭方（如浏览器）发送一个 FIN（Finish）包，表示数据发送完毕。 <ul><li>由浏览器发送的，发送给服务器，我东西发送完了（请求报文），你准备关闭吧</li></ul></li><li><strong>第二次挥手（ACK）</strong>：被动关闭方（如服务器）收到 FIN 包后，发送一个 ACK 包确认。 <ul><li>由服务器发起的，告诉浏览器，我东西接受完了（请求报文），我准备关闭了，你也准备吧</li></ul></li><li><strong>第三次挥手（FIN）</strong>：被动关闭方发送一个 FIN 包，表示数据发送完毕。 <ul><li>由服务器发起，告诉浏览器，我东西发完了（响应报文），你准备关闭吧</li></ul></li><li><strong>第四次挥手（ACK）</strong>：主动关闭方收到 FIN 包后，发送一个 ACK 包确认，并等待一定时间（通常是 2 倍的 MSL，最大报文段生存时间）后关闭连接。 <ul><li>由浏览器发起，告诉服务器，我东西接受完了，我准备关闭了（响应报文），你也准备吧</li></ul></li></ol><h3 id="浏览器的优化与缓存" tabindex="-1">浏览器的优化与缓存 <a class="header-anchor" href="#浏览器的优化与缓存" aria-label="Permalink to &quot;浏览器的优化与缓存&quot;">​</a></h3><p>现代浏览器和服务器会进行各种优化，以提高页面加载速度和用户体验：</p><ul><li><strong>文件压缩</strong>：使用 Gzip 等方法压缩文件传输。</li><li><strong>缓存</strong>：利用浏览器缓存、HTTP 缓存或 Service Worker 缓存，减少重复请求。</li><li><strong>CDN（内容分发网络）</strong>：通过 CDN 分布式地存储和传输资源，缩短请求时间。</li></ul><h3 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h3><p>从输入 URL 到页面完全渲染，背后涉及的步骤非常多，包括 DNS 解析、TCP 连接的建立与终止、HTTP 请求与响应处理、DOM 和 CSSOM 树的构建、JavaScript 的执行以及页面的布局和绘制。了解这些步骤，有助于我们更好地优化网页性能，提高用户体验。</p>',25),r=[e];function n(s,c,h,_,d,S){return i(),l("div",null,r)}const P=a(o,[["render",n]]);export{u as __pageData,P as default};
